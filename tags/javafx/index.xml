<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javafx on Yo-Dave</title>
    <link>https://yo-dave.com/tags/javafx/</link>
    <description>Recent content in javafx on Yo-Dave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2011-2018, David D. Clark. All rights reserved.</copyright>
    <lastBuildDate>Wed, 13 Sep 2017 17:18:01 +0000</lastBuildDate>
    
	<atom:link href="https://yo-dave.com/tags/javafx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A New Version of the Confidence Interval Program</title>
      <link>https://yo-dave.com/2017/09/13/a-new-version-of-the-confidence-interval-program/</link>
      <pubDate>Wed, 13 Sep 2017 17:18:01 +0000</pubDate>
      
      <guid>https://yo-dave.com/2017/09/13/a-new-version-of-the-confidence-interval-program/</guid>
      <description>Recently, I wrote about updating an old program that did the Sign Test. Well, I have lots of old programs that could stand a bit of refreshing.
Another of the simple ones calculates the confidence interval around the proportion of successes in a series of Bernoulli trials. I wrote about it way back in 2011. The original was written in Java and Swing many years ago. It is still available in a repository on Bitbucket.</description>
    </item>
    
    <item>
      <title>A Titled JavaFX Separator</title>
      <link>https://yo-dave.com/2017/08/31/a-titled-javafx-separator/</link>
      <pubDate>Thu, 31 Aug 2017 13:50:58 +0000</pubDate>
      
      <guid>https://yo-dave.com/2017/08/31/a-titled-javafx-separator/</guid>
      <description>In the process of updating some old programs, I had to change the GUI frameworks used. The old programs were written in Java using the Swing GUI framework and the JGoodies Forms and Looks libraries. Nowadays, the official GUI framework for Java is JavaFX.
Making the transition from Swing to JavaFX was relatively painless because the programs were so small. However, one of the things I missed from the JGoodies Forms library was the &amp;ldquo;titled separator&amp;rdquo;, that is a separator with a label in front of it.</description>
    </item>
    
    <item>
      <title>An Updated Sign Test Program</title>
      <link>https://yo-dave.com/2017/08/31/an-updated-sign-test-program/</link>
      <pubDate>Thu, 31 Aug 2017 13:05:51 +0000</pubDate>
      
      <guid>https://yo-dave.com/2017/08/31/an-updated-sign-test-program/</guid>
      <description>Long ago, I wrote a post about a small program to calculate the probabilities of a sign test.
A lot has happened since then.
The sign test is still useful to me on occasion, but the application framework used to write the original program is now unsupported. Too, the original program used Java&#39;s Swing framework for the GUI. The new official GUI framework for Java is JavaFX.
So I&#39;ve updated the program a bit.</description>
    </item>
    
    <item>
      <title>Rant About JavaFX Ecosystem</title>
      <link>https://yo-dave.com/2017/04/22/rant-about-javafx-ecosystem/</link>
      <pubDate>Sat, 22 Apr 2017 14:30:27 +0000</pubDate>
      
      <guid>https://yo-dave.com/2017/04/22/rant-about-javafx-ecosystem/</guid>
      <description>Feeling a bit frustrated today, so I thought I would just vent a bit.
Iâ€™ve been working on some personal tools. I see some things in other tools that I would like to include in my own. I keep finding that those features that I like are written in JavaScript with that whole mess of an ecosystem. When I look for something similar in Java/JavaFX I find next to nothing.</description>
    </item>
    
    <item>
      <title>Keeping the JavaFX UI Responsive</title>
      <link>https://yo-dave.com/2017/01/30/keeping-the-javafx-ui-responsive/</link>
      <pubDate>Mon, 30 Jan 2017 16:45:26 +0000</pubDate>
      
      <guid>https://yo-dave.com/2017/01/30/keeping-the-javafx-ui-responsive/</guid>
      <description>It&#39;s common knowledge that the JavaFX user interface toolkit is single-threaded. When your JavaFX-based program is doing things that can take some time, you need to run those tasks on a separate thread(s) to keep the interface responsive.
Recently, I&#39;ve been working on a program that can spend a lot of time reading and writing to the disk, but at the same time I want to retain the ability for the user to change views of the UI as the work proceeds.</description>
    </item>
    
    <item>
      <title>Finding Mono-Spaced Fonts in JavaFX</title>
      <link>https://yo-dave.com/2015/07/27/finding-mono-spaced-fonts-in-javafx/</link>
      <pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yo-dave.com/2015/07/27/finding-mono-spaced-fonts-in-javafx/</guid>
      <description>There are many use cases where a mono-spaced (fixed-width) font is useful in programming. Programming editors and creating program listings come to mind. But there doesn&#39;t seem to be a consistent way of obtaining a list of all of the mono-spaced fonts installed in the operating system.
Back in the days of Swing, you usually had to grab a list of font families (e.g. Arial, Times New Roman, etc.) from AWT and then create a BufferedImage to print the font to and check layout widths.</description>
    </item>
    
    <item>
      <title>Tasks and UI Updates in JavaFX</title>
      <link>https://yo-dave.com/2015/06/30/tasks-and-ui-updates-in-javafx/</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yo-dave.com/2015/06/30/tasks-and-ui-updates-in-javafx/</guid>
      <description>&lt;p&gt;Recently, I answered a &lt;a href=&#34;http://stackoverflow.com/questions/30980138/javafx-indeterminate-progress-bar-while-doing-a-process/30986188#30986188&#34;&gt;question&lt;/a&gt; on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt; related to executing a long-running task in the background of a JavaFX application while updating the UI on the progress of that task. I have found myself coming back to that solution several times now.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Focus Behavior Change between JavaFX 2 and JavaFX 8 when Selecting Rows in a TableView</title>
      <link>https://yo-dave.com/2015/04/18/focus-behavior-change-between-javafx-2-and-javafx-8-when-selecting-rows-in-a-tableview/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yo-dave.com/2015/04/18/focus-behavior-change-between-javafx-2-and-javafx-8-when-selecting-rows-in-a-tableview/</guid>
      <description>&lt;p&gt;For a little while now, I&#39;ve been working on an application that manages a list of documents, providing multiple views that the user can edit.&lt;/p&gt;
&lt;p&gt;The application looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://yo-dave.com/static/img/2015_04_18_Main_Screen_Capture_Cropped.PNG&#34;&gt;&lt;img src=&#34;https://yo-dave.com/static/img/2015_04_18_Main_Screen_Capture.PNG&#34; alt=&#34;Image of the document manager main screen&#34; title=&#34;The document manager main screen&#34;&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;The document manager main screen&lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The user selects the document they wish to view or edit by selecting it from the large &lt;code&gt;TableView&lt;/code&gt; in the middle of the window. The area on the right provides controls to view and edit details. (The area on the left is for filtering the documents displayed in the central table.)&lt;/p&gt;
&lt;p&gt;Based on some early advice, I had watchers on the focus property of the fields that could be edited. When a control lost focus, any changes were written to the database. The user didn&#39;t have to do anything to save their work. It just happened.&lt;/p&gt;
&lt;p&gt;This worked with Java 7 and JavaFX 2. After the switch to Java 8 and JavaFX 8, things were not quite the same. If a user was making a change somewhere and then selected another document without moving to another editing view, the data was lost. The focus change notification did not arrive before the new document was selected in the table (repopulating the editing control before the data was saved.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Saving and Restoring Program Configuration across Sessions in Clojure</title>
      <link>https://yo-dave.com/2014/01/06/saving-and-restoring-program-configuration-across-sessions-in-clojure/</link>
      <pubDate>Mon, 06 Jan 2014 13:13:46 +0000</pubDate>
      
      <guid>https://yo-dave.com/2014/01/06/saving-and-restoring-program-configuration-across-sessions-in-clojure/</guid>
      <description>&lt;p&gt;I like to use programs that can remember what I was doing the last time I was working with them. They should restore the window just as I had it, remember which file(s) I was working with, what preferences I had selected, and so on. Naturally, I want the programs I write to be just as considerate of the user.&lt;/p&gt;
&lt;p&gt;For some time, I&#39;ve been fretting over the best way to do this in a Clojure program. Should I provide wrappers around the Java Preferences API? Some other mechanism? Turns out I should just embrace simplicity.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaFX Still Not Ready?</title>
      <link>https://yo-dave.com/2013/12/29/javafx-still-not-ready/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/12/29/javafx-still-not-ready/</guid>
      <description>Just a short rant about JavaFX because I&#39;m pissed about it at the moment. I enjoy using it for the most part but it sometimes throws up surprising obstacles in otherwise routine work. The latest for me was an unexpected lack of a spinner control. There are alternatives in some open source projects, but, really? No spinners built in?
This is almost as gob-smacking weird as the lack of dialogs. (Ok, there are some dialogs, like for opening/saving files, but not much in the way of user-programmable dialogs built in.</description>
    </item>
    
    <item>
      <title>More on Loading Fonts</title>
      <link>https://yo-dave.com/2013/08/12/more-on-loading-fonts/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/08/12/more-on-loading-fonts/</guid>
      <description>A couple days ago, I posted a little snippet showing how to load and font from a list of preferred fonts using Clojure and JavaFX. Well, I&#39;ve extended the demo a bit to show how to load both fonts installed on the OS and fonts from a resource file.
Here&#39;s the new snippet.
(ns clojure_font_loading.core(:gen-class:extends javafx.application.Application)(:import[javafx.application Application][javafx.event EventHandler][javafx.scene Scene][avafx.scene.control Button][javafx.scene.layout StackPane VBox][javafx.</description>
    </item>
    
    <item>
      <title>Loading Fonts Like CSS</title>
      <link>https://yo-dave.com/2013/08/10/loading-fonts-like-css/</link>
      <pubDate>Sat, 10 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/08/10/loading-fonts-like-css/</guid>
      <description>Just wanted to pass along a little snippet I have found myself using fairly frequently. CSS has the ability to specify the appropriate font to use in displaying a document. It handles the tag in such a way that it can gracefully degrade from a &amp;ldquo;preferred&amp;rdquo; font through a series of less ideal typefaces depending on what&#39;s available on the machine doing the display.
That&#39;s a handy facility to have, even on Windows, which can have different fonts available depending on the version of Windows and what software has been installed.</description>
    </item>
    
    <item>
      <title>Keyboard Shortcuts for JavaFX Buttons</title>
      <link>https://yo-dave.com/2013/06/04/keyboard-shortcuts-for-javafx-buttons/</link>
      <pubDate>Tue, 04 Jun 2013 04:24:09 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/06/04/keyboard-shortcuts-for-javafx-buttons/</guid>
      <description>Most programs written for graphical user interfaces still provide a way to operate with the keyboard, requiring minimal mouse usage. The thought is that expert users will want to speed through their work keeping their fingers on the keyboard rather than devote an entire hands worth of fingers to controlling the mouse. I&#39;ve been learning JavaFX, the eventual replacement for the Swing UI framework on Java, and wanted to explore how shortcut functionality had changed.</description>
    </item>
    
    <item>
      <title>JavaFX KeyCodeCombinations in Clojure</title>
      <link>https://yo-dave.com/2013/06/01/javafx-keycodecombinations-in-clojure/</link>
      <pubDate>Sat, 01 Jun 2013 22:26:04 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/06/01/javafx-keycodecombinations-in-clojure/</guid>
      <description>&lt;p&gt;I&#39;ve been experimenting with adding keyboard accelerators to some of the &lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure&lt;/a&gt; programs I&#39;ve written with &lt;a href=&#34;http://www.oracle.com/technetwork/java/javafx/overview/index.html&#34;&gt;JavaFX&lt;/a&gt;-based user interfaces. As part of that investigation, I tried to translate the &lt;a href=&#34;http://en.wikipedia.org/wiki/Java_%28programming_language%29&#34;&gt;Java &lt;/a&gt; program &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;http://www.example8.com/category/view/id/76&#34; title=&#34;Link to Java version of program.&#34;&gt;here&lt;/a&gt;&lt;!-- raw HTML omitted --&gt; (&lt;strong&gt;Broken Link&lt;/strong&gt;) to Clojure. The program just puts up a window with a menu bar containing only a &amp;ldquo;&lt;code&gt;File&lt;/code&gt;&amp;rdquo; menu which itself contains one item, &amp;ldquo;&lt;code&gt;Exit&lt;/code&gt;&amp;rdquo;. Most programs provide a keyboard shortcut or accelerator to close the program with a &lt;code&gt;Ctrl-X&lt;/code&gt; (on Windows). Figuring out how to add that functionality was a bit of an issue for me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clojure, JavaFX and Tic-Tac-Toe</title>
      <link>https://yo-dave.com/2013/05/08/clojure-javafx-and-tic-tac-toe/</link>
      <pubDate>Wed, 08 May 2013 17:20:37 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/05/08/clojure-javafx-and-tic-tac-toe/</guid>
      <description>&lt;p&gt;Recently, I have been experimenting with &lt;a href=&#34;http://www.oracle.com/technetwork/java/javafx/overview/index.html&#34; title=&#34;Link to JavaFX developer&#34;&gt;JavaFX&lt;/a&gt; in &lt;a href=&#34;http://clojure.org/&#34; title=&#34;Link to the Clojure language home page.&#34;&gt;Clojure&lt;/a&gt;. Initially, in one of my experiments, I wanted to learn how to re-size a game-board interface as it&#39;s containing window was re-sized. In the past I&#39;ve had medical device interfaces that draw a representation of a physical device and these drawings must re-size as their window is re-sized. The &lt;a href=&#34;https://clartaq.github.io/yo-dave/2013/02/18/2013-02-18-re-sizing-an-interface-in-javafx-and-clojure/&#34;&gt;initial experiment&lt;/a&gt; was with a simple interface for Tic-Tac-Toe. Since I had such a nice interface, I thought, why not program the complete game.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Styled Dialogs in JavaFX with JFXtras MonologFX</title>
      <link>https://yo-dave.com/2013/05/08/styled-dialogs-in-javafx-with-jfxtras-monologfx/</link>
      <pubDate>Wed, 08 May 2013 14:14:30 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/05/08/styled-dialogs-in-javafx-with-jfxtras-monologfx/</guid>
      <description>&lt;p&gt;I&#39;ve been having a lot of fun learning &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html&#34; title=&#34;Link to JavaFX developer&#34;&gt;JavaFX&lt;/a&gt;, even after many years of using the Java Swing framework.&lt;/p&gt;
&lt;p&gt;One thing about JavaFX that I still don&#39;t understand is the lack of built-in support for dialogs. Well, that shortcoming has annoyed enough people that there are several efforts underway to provide dialog functionality. One of those is part of the &lt;a href=&#34;http://jfxtras.org/&#34; title=&#34;Link to the JFXtras home page.&#34;&gt;JFXtras&lt;/a&gt; project, &lt;a href=&#34;https://blogs.oracle.com/javajungle/entry/monologfx_floss_javafx_dialogs_for&#34; title=&#34;Link to MonologFX introduction blog.&#34;&gt;MonologFX&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Re-sizing an Interface in JavaFX and Clojure</title>
      <link>https://yo-dave.com/2013/02/18/re-sizing-an-interface-in-javafx-and-clojure/</link>
      <pubDate>Mon, 18 Feb 2013 21:48:11 +0000</pubDate>
      
      <guid>https://yo-dave.com/2013/02/18/re-sizing-an-interface-in-javafx-and-clojure/</guid>
      <description>Since JavaFX is the future of the user interface for Java, I&#39;ve started trying to learn it. Since I&#39;m also learning Clojure, I&#39;m doing the work in that language.
One of the things I&#39;ve been looking into is how the interface responds to resizing. If you have all of your controls in a nice layout, that is usually taken care of for you. But how do you handle things if the interface is not made up of standard components, something like a graphical game interface for example?</description>
    </item>
    
  </channel>
</rss>