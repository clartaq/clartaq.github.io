<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redo on Yo-Dave</title>
    <link>https://yo-dave.com/tags/redo/</link>
    <description>Recent content in Redo on Yo-Dave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2011-2020, David D. Clark. All rights reserved.</copyright>
    <lastBuildDate>Sun, 05 Jan 2020 17:27:07 -0500</lastBuildDate>
    
	<atom:link href="https://yo-dave.com/tags/redo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Undo/Redo with Clojure using the Memento Pattern</title>
      <link>https://yo-dave.com/2020/01/05/undo/redo-with-clojure-using-the-memento-pattern/</link>
      <pubDate>Sun, 05 Jan 2020 17:27:07 -0500</pubDate>
      
      <guid>https://yo-dave.com/2020/01/05/undo/redo-with-clojure-using-the-memento-pattern/</guid>
      <description>Because of the ability to attach &amp;ldquo;watch&amp;rdquo; functions to Clojure atoms, it is very easy to create and use a simple undo/redo mechanism.
The approach is to create a stack that holds every change to the state of the atom, as detected by a watch function. To undo something you just pop the last state off the stack. You can repeat it until you recover the original state of the atom as it existed when you attached the watch function.</description>
    </item>
    
  </channel>
</rss>